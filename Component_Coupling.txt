1) Components that occupy the zone of uselessness have a 1 on the scale of abstraction and 1 on the scale of Instability. This means that they are abstract (meaning not concrete or actually do anything) and are very instable, meaning there is nothing that relies on them. In essence, this class is useless, since it doesn't do anything and nothing depends on it.
    On the other side, the zone of pain is a 0,0 for A and I, meaning it is concrete (and subject to change often), but has a lot of classes that depend on it. This means that anytime a change needs to be made to the concrete code, all of the classes that depend on it need to be changed as well. This is very painful, hence the name

2) The application class has a dependency on the SQL class, since it has to call functions from the SQLite class in order to make changes and do all of the application-y stuff.
b) We could use an interface to invert the dependency. I've often done this in code, where I have an abstract class called "DBManager" or something of the sort, such that it is an abstract base class that the SQLite depends on to override functionality from, and then the application can just call the DBManager functions. That way if we switch out the SQLite DB for another style (even a no-sql, although IDK why you'd ever want to use one...), it doesn't affect our main application code at all
